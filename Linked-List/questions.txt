//must do reversal of doubly linked list;

1)Reverse a Linked List: https://bit.ly/3H1lKov
2)find Middle of a Linked List: https://bit.ly/3tRF3ga
3)**(v.v.i)Reverse a Linked List in K group: https://bit.ly/3r1rCIP
4)Circular Linked List or not: https://bit.ly/3qY0KcF
5)Detect & Remove Loop in Linked List: https://bit.ly/3rSdTDo
6)Remove Duplicates from Sorted Linked List: https://bit.ly/3rjMQC5
7)Remove Duplicates from Un-Sorted Linked List: https://bit.ly/3uaGRRU
8)Split A Circular Linked List: https://www.codingninjas.com/codestudio/problems/split-a-circular-linked-list_1071003
9)Sort 0s, 1s and 2s : https://bit.ly/3s3fAOu
10)Merge 2 sorted Linked List : https://bit.ly/3rfFdfV
11)Palindrome Linked List: https://practice.geeksforgeeks.org/problems/check-if-linked-list-is-pallindrome/1
12)Add 2 Numbers rep. by Linked List:  https://practice.geeksforgeeks.org/problems/add-two-numbers-represented-by-linked-lists/1
13)Clone Linked List with Random Pointers:  https://practice.geeksforgeeks.org/problems/clone-a-linked-list-with-next-and-random-pointer/1
14)Merge Sort Linked List:  https://bit.ly/3GsXWsz
15)Flatten a Linked List: https://bit.ly/3GoASv6
**************16)Merge k sorted lists: https://www.codingninjas.com/codestudio/problems/merge-k-sorted-lists_992772?leftPanelTab=0
17)why we prefer merge sort in linked list and quick sort in arrays?
ans:  In linked list to access i’th index, we have to travel each and every node from the head to i’th node as we don’t have continuous block of memory. Therefore, the overhead increases for quick sort. Merge sort accesses data sequentially and the need of random access is low.
link: https://www.geeksforgeeks.org/why-quick-sort-preferred-for-arrays-and-merge-sort-for-linked-lists/
love babber 450 questions : https://drive.google.com/file/d/1FMdN_OCfOI0iAeDlqswCiC2DZzD4nPsb/view
codestudio: https://www.codingninjas.com/codestudio/guided-paths/data-structures-algorithms/content/118786/offering/1381239
